class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int count=0,i=0,j=0;
		int[] nums = new int[nums1.length+nums2.length];
		while(count<nums1.length+nums2.length) {
		//防止数组超出范围
			if(i>=nums1.length) {
				if(j>=nums2.length) {
					break;
				}
				nums[count++]=nums2[j++];
				continue;
			}
			if(j>=nums2.length) {
				if(i>=nums1.length) {
					break;
				}
				nums[count++]=nums1[i++];
				continue;
			}
		//因为是有序数组，判断大小插入新数组
			if(nums1[i]>nums2[j]) {
				nums[count++]=nums2[j++];
				continue;
			}
			if(nums1[i]<nums2[j]) {
				nums[count++]=nums1[i++];
				continue;
			}
			if(nums1[i]==nums2[j]) {
				nums[count++]=nums1[i++];
				nums[count++]=nums2[j++];
				continue;
			}
			if(i==nums1.length && j!=nums2.length) {
				nums[count++]=nums2[j++];
				continue;
			}
			if(i!=nums1.length && j==nums2.length) {
				nums[count++]=nums1[i++];
				continue;
			}
    }
	//判断长度
    if((nums.length)%2==0) {
        double a=nums[nums.length/2];
        double b=nums[(nums.length/2)-1];
			return ((a+b)/2);
		}else{
            return nums[nums.length/2];
        }
    
}}
很普通的思路。一开始没注意让数组超出上线了，后面判断长度的时候忘记把int换成double。

class Solution {
    public double findMedianSortedArrays(int[] A, int[] B) {
        int m = A.length;
        int n = B.length;
        if (m > n) { // to ensure m<=n
            int[] temp = A; A = B; B = temp;
            int tmp = m; m = n; n = tmp;
        }
        int iMin = 0, iMax = m, halfLen = (m + n + 1) / 2;
        while (iMin <= iMax) {
            int i = (iMin + iMax) / 2;
            int j = halfLen - i;
            if (i < iMax && B[j-1] > A[i]){
                iMin = i + 1; // i is too small
            }
            else if (i > iMin && A[i-1] > B[j]) {
                iMax = i - 1; // i is too big
            }
            else { // i is perfect
                int maxLeft = 0;
                if (i == 0) { maxLeft = B[j-1]; }
                else if (j == 0) { maxLeft = A[i-1]; }
                else { maxLeft = Math.max(A[i-1], B[j-1]); }
                if ( (m + n) % 2 == 1 ) { return maxLeft; }

                int minRight = 0;
                if (i == m) { minRight = B[j]; }
                else if (j == n) { minRight = A[i]; }
                else { minRight = Math.min(B[j], A[i]); }

                return (maxLeft + minRight) / 2.0;
            }
        }
        return 0.0;
    }
}
时间复杂度：O(LOG(MIN(N,M)))
二分法，没看懂（（
